version: '3.8'

services:
  # Mangle Rule Engine Service
  mangle:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.mangle
    container_name: junosixteen-mangle
    restart: unless-stopped
    environment:
      - MANGLE_PORT=8088
      - MANGLE_RULES_DIR=./rules
      - MG_BIN=mg
    ports:
      - "8088:8088"
    volumes:
      # Mount rules directory for live editing
      - ../rules:/app/rules:ro
    networks:
      - junosixteen-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8088/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Node.js Backend Service
  backend:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.backend
    container_name: junosixteen-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NODE_PORT=5000
      - POLICY_BASEURL=http://mangle:8088
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
    ports:
      - "5000:5000"
    depends_on:
      mangle:
        condition: service_healthy
    networks:
      - junosixteen-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: junosixteen-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - mangle
    networks:
      - junosixteen-network
    profiles:
      - production

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: junosixteen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis-data:/data
    networks:
      - junosixteen-network
    profiles:
      - cache

  # Optional: PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: junosixteen-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-junosixteen}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - junosixteen-network
    profiles:
      - database

# Networks
networks:
  junosixteen-network:
    driver: bridge
    name: junosixteen

# Volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

# Development override example
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml (separate file for development)
version: '3.8'

services:
  mangle:
    environment:
      - LOG_LEVEL=debug
    volumes:
      # Live reload for development
      - ../rules:/app/rules
    command: ["sh", "-c", "echo 'Development mode' && ./mangle_service"]

  backend:
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    volumes:
      # Live reload for development
      - ../backend:/app
      - /app/node_modules
    command: ["npm", "run", "dev"] 