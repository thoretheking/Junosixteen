version: '3.8'

services:
  # Mangle Policy Engine Service
  mangle-svc:
    build: 
      context: ../services/mangle
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    environment:
      - PORT=8088
      - LOG_LEVEL=info
      - MANGLE_FAKE=${MANGLE_FAKE:-0}
    volumes:
      - ../rules:/app/rules:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # JunoSixteen Backend API
  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
      - MANGLE_URL=http://mangle-svc:8088
      - DATABASE_URL=${DATABASE_URL:-postgresql://juno:juno@postgres:5432/junosixteen}
    depends_on:
      mangle-svc:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-junosixteen}
      - POSTGRES_USER=${POSTGRES_USER:-juno}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-juno}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-juno} -d ${POSTGRES_DB:-junosixteen}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis für Caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Frontend Development Server (optional)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_MANGLE_DEBUG=true
    volumes:
      - ../frontend/src:/app/src:ro
      - ../frontend/public:/app/public:ro
    depends_on:
      - backend
    profiles: ["dev", "frontend"]

  # Nginx Reverse Proxy (für Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../infra/ssl:/etc/ssl:ro
    depends_on:
      - backend
      - frontend
    profiles: ["production"]
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: junosixteen-network 