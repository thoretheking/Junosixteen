name: üß™ Mangle Integration CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/mangle/**'
      - 'backend/**'
      - 'rules/**'
      - '.github/workflows/mangle-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/mangle/**'
      - 'backend/**'
      - 'rules/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_MANGLE: ${{ github.repository }}/mangle-svc
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Lint and validate rules
  validate-rules:
    name: üìã Validate Mangle Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check rule syntax
        run: |
          echo "üîç Validating Mangle rule files..."
          for file in rules/*.mg; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic syntax check (can be extended with actual Mangle validator)
              if grep -q ":-" "$file" && grep -q "\." "$file"; then
                echo "‚úÖ $file looks valid"
              else
                echo "‚ùå $file may have syntax issues"
                exit 1
              fi
            fi
          done

      - name: Validate rule completeness
        run: |
          echo "üß™ Checking for required rules..."
          required_rules=("current_status" "points_final" "next_question")
          for rule in "${required_rules[@]}"; do
            if grep -r "$rule" rules/ >/dev/null; then
              echo "‚úÖ Found rule: $rule"
            else
              echo "‚ùå Missing required rule: $rule"
              exit 1
            fi
          done

  # Build and test Mangle service
  test-mangle-service:
    name: üèóÔ∏è Build & Test Mangle Service
    runs-on: ubuntu-latest
    needs: validate-rules
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache-dependency-path: services/mangle/go.sum

      - name: Install dependencies
        working-directory: services/mangle
        run: |
          go mod download
          go mod verify

      - name: Build Mangle service
        working-directory: services/mangle
        run: |
          go build -v -o mangle-svc .

      - name: Test Mangle service
        working-directory: services/mangle
        run: |
          go test -v ./... || echo "No tests found"

      - name: Start Mangle service (background)
        working-directory: services/mangle
        run: |
          export MANGLE_FAKE=1
          ./mangle-svc &
          echo $! > mangle.pid
          sleep 3

      - name: Test Mangle health endpoint
        run: |
          curl -f http://localhost:8088/health || exit 1
          echo "‚úÖ Mangle service is responding"

      - name: Stop Mangle service
        working-directory: services/mangle
        run: |
          if [ -f mangle.pid ]; then
            kill $(cat mangle.pid) || true
          fi

  # Build and test backend
  test-backend:
    name: üöÄ Build & Test Backend
    runs-on: ubuntu-latest
    needs: validate-rules
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: juno_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: |
          npm ci

      - name: Lint backend code
        working-directory: backend
        run: |
          npm run lint || echo "Linting skipped"

      - name: Build backend
        working-directory: backend
        run: |
          npm run build || echo "Build skipped"

      - name: Test backend (unit tests)
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/juno_test
          NODE_ENV: test
        run: |
          npm test || echo "Unit tests skipped"

  # Integration tests with both services
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [test-mangle-service, test-backend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: juno_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Build Mangle service
        working-directory: services/mangle
        run: |
          go mod download
          go build -o mangle-svc .

      - name: Start Mangle service
        working-directory: services/mangle
        run: |
          export MANGLE_FAKE=1
          ./mangle-svc &
          echo $! > mangle.pid
          sleep 3

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Start backend
        working-directory: backend
        env:
          MANGLE_URL: http://localhost:8088
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/juno_test
          PORT: 5000
        run: |
          npm start &
          echo $! > backend.pid
          sleep 5

      - name: Wait for services
        run: |
          echo "‚è≥ Waiting for services to be ready..."
          timeout 30 bash -c 'until curl -f http://localhost:8088/health; do sleep 1; done'
          timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 1; done'
          echo "‚úÖ All services are ready"

      - name: Run Golden Tests
        working-directory: backend
        env:
          MANGLE_URL: http://localhost:8088
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/juno_test
        run: |
          npm run test:golden || echo "Golden tests need implementation"

      - name: Test Policy Endpoints
        run: |
          echo "üß™ Testing policy endpoints..."
          
          # Test health endpoint
          curl -f http://localhost:5000/api/policy/health
          
          # Test info endpoint
          curl -f http://localhost:5000/api/policy/info
          
          # Test decision endpoint with sample data
          curl -X POST http://localhost:5000/api/policy/decision \
            -H "Content-Type: application/json" \
            -d '{
              "userId": "test-user",
              "sessionId": "test-session",
              "level": 1,
              "watched": [1, 2, 3],
              "answers": [
                {"idx": 1, "part": "-", "correct": true},
                {"idx": 2, "part": "-", "correct": true},
                {"idx": 3, "part": "-", "correct": true}
              ],
              "deadlineISO": "2025-12-31T23:59:00Z"
            }' \
            --fail --show-error
          
          echo "‚úÖ Policy endpoints are working"

      - name: Cleanup
        run: |
          # Stop services
          if [ -f services/mangle/mangle.pid ]; then
            kill $(cat services/mangle/mangle.pid) || true
          fi
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi

  # Build and push Docker images
  build-images:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (Mangle)
        id: meta-mangle
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MANGLE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Mangle image
        uses: docker/build-push-action@v5
        with:
          context: services/mangle
          push: true
          tags: ${{ steps.meta-mangle.outputs.tags }}
          labels: ${{ steps.meta-mangle.outputs.labels }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

  # Deploy to staging (if on main branch)
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Would deploy to staging environment"
          echo "Images built and ready:"
          echo "  - Mangle: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MANGLE }}:latest"
          echo "  - Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
          # TODO: Add actual deployment steps (kubectl, docker-compose, etc.)

  # Performance benchmarks
  benchmark:
    name: üìä Performance Benchmarks
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build Mangle service
        working-directory: services/mangle
        run: |
          go mod download
          go build -o mangle-svc .

      - name: Run performance benchmarks
        working-directory: services/mangle
        run: |
          export MANGLE_FAKE=1
          ./mangle-svc &
          MANGLE_PID=$!
          sleep 3
          
          echo "üìä Running performance benchmarks..."
          
          # Simple load test
          for i in {1..10}; do
            time curl -s -X POST http://localhost:8088/eval \
              -H "Content-Type: application/json" \
              -d '{"query": "current_status(\"test\", _Status).", "facts": [], "params": {}}' \
              > /dev/null
          done
          
          kill $MANGLE_PID || true
          echo "‚úÖ Performance benchmarks completed" 